#!/bin/bash

# helper functions

isLinux() {
	[ "$(uname -s)" == "Linux" ]
}

isMacOS() {
	[ "$(uname -s)" == "Darwin" ]
}

errcho() {
	>&2 echo "$@"
}

vm-state() {
	if isLinux; then
		virsh list --all | grep " $VM_NAME " | awk '{ print $3 }'
	elif isMacOS; then
		VBoxManage showvminfo "$VM_NAME" | sed -n 's/State:[\ \t]*\([A-Za-z ]*\).*/\1/p'
	else
		exit 1
	fi
}

# constants

UVMCFG_PATH="$HOME/.uvmcfg"

VM_STATE_RUNNING="running"
VM_STATE_PAUSED="paused"
VM_STATE_OFF="powered off"

# configuration sourcing

eval $(
	source "$UVMCFG_PATH";
	echo 'VM_NAME="'$NAME'"';
	echo 'VM_DISPLAY_NAME="'$DISPLAY_NAME'"';
	echo 'VM_SSH_PORT="'$SSH_PORT'"';
	echo 'VM_DEFAULT_USER="'$DEFAULT_USER'"';
	echo 'VM_MAC_ADDRESS="'$MAC_ADDRESS'"';
)

# configuration defaults

if [ -z "$VM_DISPLAY_NAME" ]; then
	VM_DISPLAY_NAME="$VM_NAME"
fi

if [ -z "$VM_SSH_PORT" ]; then
	VM_SSH_PORT=22
	if isMacOS; then
		if ! [ -z "$VM_NAME" ]; then
			VM_SSH_PORT=$(vboxmanage showvminfo arch --machinereadable | sed -n 's/Forwarding([0-9]*)="ssh,[^,]*,\([^,]*\),\([^,]*\),[^,]*,[^,]*".*/\2/p')
		fi
	fi
fi

# configuration validation

if [ -z "$VM_NAME" ]; then
	errcho "No value found for \`NAME\` in \`$UVMCFG_PATH\`"
	exit 1
fi

if isLinux; then
	if [ -z "$VM_MAC_ADDRESS" ]; then
		errcho "No value found for \`MAC_ADDRESS\` in \`$UVMCFG_PATH\`"
		exit 1
	fi
fi

# subcommands

subcommands.state() {
	local out=$(vm-state)
	local STATE="$VM_STATE_OFF"
	case $out in
		*running*)
			STATE="$VM_STATE_RUNNING"
			;;
		*paused*)
			STATE="$VM_STATE_PAUSED"
			;;
		*)
			STATE="$VM_STATE_OFF"
			;;
	esac
	echo "$STATE"
}

subcommands.running() {
	local RUNNING=1
	if [ "$(subcommands.state)" == "$VM_STATE_RUNNING" ]; then
		echo "VM is running"
		RUNNING=0
	else
		echo "VM is powered off"
		RUNNING=1
	fi
	return $RUNNING
}

subcommands.ip() {
	local IP=""
	if isLinux; then
		IP=$(arp -n | sed -n -e 's/\([0-9\.]\+\).\+'"$VM_MAC_ADDRESS"'.\+/\1/p')
	elif isMacOS; then
		IP=$(vboxmanage showvminfo arch --machinereadable | sed -n 's/Forwarding([0-9]*)="ssh,[^,]*,\([^,]*\),\([^,]*\),[^,]*,[^,]*".*/\1/p')
	fi
	if [ "x$IP" == "x" ]; then
		errcho "Failed to determine VM IP"
		return 1
	fi
	echo "$IP"
	return 0
}

subcommands.wait() {
	until subcommands.ip > /dev/null 2>&1; do
		sleep 1
	done

	echo "VM is now accessible over SSH"

	return 0
}

subcommands.start() {
	local WAIT=1
	if [ "x$1" == "x-w" ] || [ "x$1" == "x-wait" ] || [ "x$1" == "x--wait" ]; then
		WAIT=0
		shift;
	fi

	case "$(subcommands.state)" in
		"$VM_STATE_RUNNING")
			echo "VM already running"
			return 0
			;;
		"$VM_STATE_PAUSED")
			echo "VM paused; use \`uvm resume\` to unpause it"
			return 1
			;;
	esac

	if subcommands.running > /dev/null 2>&1; then
		echo "VM already running"

		if [ $WAIT -eq 0 ]; then
			subcommands.wait
		fi

		return 0
	fi

	local OUTPUT=""
	local EXIT_CODE=0
	if isLinux; then
		OUTPUT=$(virsh start "$VM_NAME" 2>&1)
		EXIT_CODE=$?
	elif isMacOS; then
		OUTPUT=$(VBoxManage startvm "$VM_NAME" --type headless 2>&1)
		EXIT_CODE=$?
	fi
	if [ "$EXIT_CODE" -ne 0 ]; then
		errcho "Failed to start the VM."
		errcho "Command failed with exit code $EXIT_CODE."
		errcho "Command output:"
		echo "$OUTPUT"
		exit 1
	fi

	echo "VM started successfully"

	if [ $WAIT -eq 0 ]; then
		subcommands.wait
	fi

	return 0
}

subcommands.stop() {
	case "$(subcommands.state)" in
		"$VM_STATE_OFF")
			echo "VM already powered off"
			return 0
			;;
	esac

	local FORCE=0
	if [ "x$1" == "x-f" ] || [ "x$1" == "x-force" ] || [ "x$1" == "x--force" ]; then
		FORCE=1
		shift;
	fi

	local COMMAND=""
	if isLinux; then
		COMMAND="shutdown"
		if [ $FORCE -ne 0 ]; then
			COMMAND="destroy"
		fi
	elif isMacOS; then
		COMMAND="acpipowerbutton"
		if [ $FORCE -ne 0 ]; then
			COMMAND="poweroff"
		fi
	fi

	local OUTPUT=""
	local EXIT_CODE=0
	if isLinux; then
		OUTPUT=$(virsh "$COMMAND" "$VM_NAME" 2>&1)
		EXIT_CODE=$?
	elif isMacOS; then
		OUTPUT=$(VBoxManage controlvm "$VM_NAME" "$COMMAND" 2>&1)
		EXIT_CODE=$?
	fi
	if [ "$EXIT_CODE" -ne 0 ]; then
		errcho "Failed to stop the VM."
		errcho "Command failed with exit code $EXIT_CODE."
		errcho "Command output:"
		echo "$OUTPUT"
		exit 1
	fi

	if [ $FORCE -eq 0 ]; then
		until ! subcommands.running; do
			sleep 1
		done
	fi

	echo "VM stopped successfully"
}

subcommands.pause() {
	case "$(subcommands.state)" in
		"$VM_STATE_PAUSED")
			echo "VM already paused"
			return 0
			;;
		"$VM_STATE_OFF")
			echo "VM powered off; can't pause"
			return 1
			;;
	esac

	local OUTPUT=""
	local EXIT_CODE=0
	if isLinux; then
		OUTPUT=$(virsh suspend "$VM_NAME" 2>&1)
		EXIT_CODE=$?
	elif isMacOS; then
		OUTPUT=$(VBoxManage controlvm "$VM_NAME" pause 2>&1)
		EXIT_CODE=$?
	fi
	local EXIT_CODE=$?
	if [ "$EXIT_CODE" -ne 0 ]; then
		errcho "Failed to pause VM."
		errcho "Command failed with exit code $EXIT_CODE."
		errcho "Command output:"
		echo "$OUTPUT"
		exit 1
	fi

	echo "VM paused successfully"
}

subcommands.resume() {
	case "$(subcommands.state)" in
		"$VM_STATE_RUNNING")
			echo "VM already running"
			return 0
			;;
		"$VM_STATE_OFF")
			echo "VM powered off; can't resume"
			return 1
			;;
	esac

	local OUTPUT=""
	local EXIT_CODE=0
	if isLinux; then
		OUTPUT=$(virsh resume "$VM_NAME" 2>&1)
		EXIT_CODE=$?
	elif isMacOS; then
		OUTPUT=$(VBoxManage controlvm "$VM_NAME" resume 2>&1)
		EXIT_CODE=$?
	fi
	
	if [ "$EXIT_CODE" -ne 0 ]; then
		errcho "Failed to resume VM."
		errcho "Command failed with exit code $EXIT_CODE."
		errcho "Command output:"
		echo "$OUTPUT"
		exit 1
	fi

	echo "VM resumed successfully"
}

subcommands.ssh() {
	local VM_USER="$VM_DEFAULT_USER@"
	local AUTO_START=1

	if [ "$VM_USER" == "@" ]; then
		VM_USER=""
	fi

	case "$1" in
		-s|-start|--start)
			AUTO_START=0
			;;
		*)
			if [ "x$1" != "x" ]; then
				VM_USER="$1@"
			fi
			;;
	esac

	case "$2" in
		-s|-start|--start)
			AUTO_START=0
			;;
		*)
			if [ "x$2" != "x" ]; then
				VM_USER="$2@"
			fi
			;;
	esac

	if [ "$AUTO_START" -eq 0 ]; then
		case "$(subcommands.state)" in
			"$VM_STATE_PAUSED")
				subcommands.resume
				;;
			"$VM_STATE_OFF")
				subcommands.start
				;;
		esac

		subcommands.wait
		sleep 1
	elif ! subcommands.running > /dev/null 2>&1; then
		echo "Can't connect over SSH; VM is not running"
		return 1
	fi

	ssh -p "$VM_SSH_PORT" "$VM_USER$(subcommands.ip)"
}

subcommands.gui() {
	local VM_USER="$VM_DEFAULT_USER@"

	if [ "$VM_USER" == "@" ]; then
		VM_USER=""
	fi

	if [ "x$1" != "x" ]; then
		VM_USER="$1@"
		shift;
	fi

	ssh -Y -p "$VM_SSH_PORT" "$VM_USER$(subcommands.ip)"
}

subcommands.mount() {
	local VM_USER="$VM_DEFAULT_USER@"

	if [ "$VM_USER" == "@" ]; then
		VM_USER=""
	fi

	local GUEST_PATH="/home/$VM_DEFAULT_USER"
	local HOST_PATH="$HOME/$VM_NAME"

	if [ "x$1" != "x" ]; then
		GUEST_PATH="$1"
	fi

	if [ "x$2" != "x" ]; then
		HOST_PATH="$2"
	fi

	sshfs "$VM_USER$(subcommands.ip):$GUEST_PATH" "$HOST_PATH" -p "$VM_SSH_PORT"
}

subcommands.help() {
	>&2 cat <<- EOF
		Ubuntu Virtual Machine Manager (v1.0.0)

		Subcommands:
		  start [-w|--wait]             	Starts the virtual machine in headless mode. Optionally, if \`-w\`/\`--wait\` is specified, the command will wait for the VM to be accessible over SSH before returning.
		  stop [-f|--force]             	Stops the virtual machine. Tries to shut it down gracefully by default; if \`-f\`/\`--force\` is given, the machine will be powered off instantly.
		  pause                         	Pauses the virtual machine
		  resume                        	Resumes the virtual machine
		  ssh [user-name] [-s|--start]  	Starts an SSH connection with the virtual machine. By default, will start a session as "\$VM_DEFAULT_USER". Optionally, specify a user to start a session as. Also, you can pass \`-s\`/\`--start\` to automatically start/resume the VM if it is not currently running.
		  gui [user-name]               	Starts an SSH connection with the virtual machine with X11 forwarding enabled. By default, will start a session as "\$VM_DEFAULT_USER". Optionally, specify a user to start a session as.
		  running                       	Checks if the VM is running
		  ip                            	Returns the current IP of the virtual machine
		  wait                          	Waits until the VM can be accessed via SSH
		  state                         	Prints a message indicating the current state of the VM
		  mount [guest-path] [host-path]	Mounts the specified guest path at the specified host path. Guest path defaults to \`/home/\$VM_DEFAULT_USER\` and host path defaults to \`~/\$VM_NAME\`.
		  help                          	Prints this help message and exits

		Configuration:
		  UVM requires a configuration file with certain information about the VM, located by default at \`~/.uvmcfg\`.
		  Here's a minimal example:
		    NAME="my-vm-name"
		    MAC_ADDRESS="ab:cd:ef:12:34:56"
		  Here's a list of all the variables that can be defined:
		    NAME
		      REQUIRED: yes
		      DESCRIPTION:
		        The programatic name of the VM, for CLI command purposes.
		        This name normally contains no spaces.
		    MAC_ADDRESS
		      REQUIRED: on Linux
		      DESCRIPTION:
		        The MAC address of the network card used used in the VM to connect to the internet.
		        To find this easily, you can run \`virsh domiflist \$VM_NAME\`.
		    DISPLAY_NAME
		      DEFAULT: "$NAME"
		      DESCRIPTION:
		        The pretty human-friendly name to use for the VM when producing output.
		    SSH_PORT
		      DEFAULT: 22
		      DESCRIPTION:
		        The port to use by default when starting an SSH session with the VM.
		    DEFAULT_USER
		      REQUIRED: no
		      DESCRIPTION:
		        The user to login as when starting an SSH session with the VM.
		        This can be overridden when running \`uvm ssh\` as noted before.
		        If left unset and no value is provided for \`user-name\` when running \`uvm ssh\`, the decision is
		        left up to the virtual machine, and it behaves the same as if \`ssh <ip>\` were executed.
	EOF
}

# entry logic

if [ "$#" -lt 1 ]; then
	subcommands.help
	exit 1
fi

SUBCOMMAND="$1"
shift;

case "$SUBCOMMAND" in
	-h|--help|help)
		subcommands.help
		;;
	start)
		subcommands.start "$@"
		;;
	stop)
		subcommands.stop "$@"
		;;
	pause)
		subcommands.pause "$@"
		;;
	resume)
		subcommands.resume "$@"
		;;
	ssh)
		subcommands.ssh "$@"
		;;
	gui)
		subcommands.gui "$@"
		;;
	running)
		subcommands.running "$@"
		;;
	ip)
		subcommands.ip "$@"
		;;
	wait)
		subcommands.wait "$@"
		;;
	state)
		subcommands.state "$@"
		;;
	mount)
		subcommands.mount "$@"
		;;
	*)
		errcho "Subcommand \"$SUBCOMMAND\" not recognized"
		subcommands.help
		exit 1
		;;
esac
